# -*- coding: utf-8 -*-
"""Tracking.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1HoJ-7m8O-SoaaoQMmmFoV0NzhUzZV0Ka
"""

from google.colab import drive
drive.mount('/content/drive')

from google.colab.patches import cv2_imshow
import numpy as np
import cv2 as cv2
import math

def Check_Value (num,arr):
  Exist=False
  for a in range(int(np.size(arr)/2)):
    cur=arr[a,0]==num[0] and arr[a,1]==num[1]
    Exist=(Exist and cur) or (~Exist and cur) or (Exist and ~cur) 
  return Exist

"""
def Check_Value (num,arr):
  Exist=False
  for a in range(int(np.size(arr)/2)):
    Exist=arr[a,0]==num[0] and arr[a,1]==num[1]
    if Exist:
      break  
  return Exist
"""

def first_point (x0,y0,image,dim):
  first_point=np.zeros(dim,int)
  K=[[-1,0] ,[-1,-1] ,[0,-1] ,[1,-1] ,[1,0] ,[1,1] ,[0,1] ,[-1,1]]
  if (image[x0,y0]==0):
    return [x0,y0]  
  for i in range(dim[0]-1):
    for j in range(dim[1]-1):
      if (image[i,j]==0): 
        neighbors=np.zeros([1,8],int)
        number=0
        for k in K:
          if (image[i+k[0],j+k[1]]==0):
            neighbors[0,number]=1
          number=number+1
        if (np.sum(neighbors)==1) :
          first_point[i,j]=1
        elif (np.sum(neighbors)==2):
          if (neighbors[0,0]+neighbors[0,1]+neighbors[0,2]==2): 
            first_point[i,j]=2
          elif(neighbors[0,1]+neighbors[0,2]+neighbors[0,3]==2):
            first_point[i,j]=2
          elif(neighbors[0,2]+neighbors[0,3]+neighbors[0,4]==2):
            first_point[i,j]=2
          elif(neighbors[0,3]+neighbors[0,4]+neighbors[0,5]==2):
            first_point[i,j]=2
          elif(neighbors[0,4]+neighbors[0,5]+neighbors[0,6]==2):
            first_point[i,j]=2
          elif(neighbors[0,5]+neighbors[0,6]+neighbors[0,7]==2):
            first_point[i,j]=2
          elif(neighbors[0,6]+neighbors[0,7]+neighbors[0,0]==2):
            first_point[i,j]=2
          elif(neighbors[0,7]+neighbors[0,0]+neighbors[0,1]==2):
            first_point[i,j]=2

        elif (np.sum(neighbors)==3):
          if (neighbors[0,0]+neighbors[0,1]+neighbors[0,2]==3): 
            first_point[i,j]=3
          elif(neighbors[0,1]+neighbors[0,2]+neighbors[0,3]==3):
            first_point[i,j]=3
          elif(neighbors[0,2]+neighbors[0,3]+neighbors[0,4]==3):
            first_point[i,j]=3
          elif(neighbors[0,3]+neighbors[0,4]+neighbors[0,5]==3):
            first_point[i,j]=3
          elif(neighbors[0,4]+neighbors[0,5]+neighbors[0,6]==3):
            first_point[i,j]=3
          elif(neighbors[0,5]+neighbors[0,6]+neighbors[0,7]==3):
            first_point[i,j]=3
          elif(neighbors[0,6]+neighbors[0,7]+neighbors[0,0]==3):
            first_point[i,j]=3
          elif(neighbors[0,7]+neighbors[0,0]+neighbors[0,1]==3):
            first_point[i,j]=3

  if (np.sum(first_point==1)!=0):
    d=[]
    result=np.where(first_point == 1)
    for i in range(np.shape(result)[1]):
      dis=((x0-result[0][i])*(x0-result[0][i]))+((y0-result[1][i])*(y0-result[1][i]))
      dis=math.sqrt(dis)
      d=np.append(d,np.array([dis]))
    arg_min=np.argmin(d)
    first_point2=[result[0][arg_min],result[1][arg_min]]
    #print(first_point2)

  elif(np.sum(first_point==2)!=0): ##
    d=[]
    result=np.where(first_point == 2)
    for i in range(np.shape(result)[1]):
      dis=((x0-result[0][i])*(x0-result[0][i]))+((y0-result[1][i])*(y0-result[1][i]))
      dis=math.sqrt(dis)
      d=np.append(d,np.array([dis]))
    arg_min=np.argmin(d)
    first_point2=[result[0][arg_min],result[1][arg_min]]
    #print(first_point2)

  elif(np.sum(first_point==3)!=0): ##
    d=[]
    result=np.where(first_point == 3)
    for i in range(np.shape(result)[1]):
      dis=((x0-result[0][i])*(x0-result[0][i]))+((y0-result[1][i])*(y0-result[1][i]))
      dis=math.sqrt(dis)
      d=np.append(d,np.array([dis]))
    arg_min=np.argmin(d)
    first_point2=[result[0][arg_min],result[1][arg_min]]
    #print(first_point2)

  else:
    checked_pix=np.array([[x0,y0]])
    found=0
    k=0
    while (True):
      if found:
        break
      k += 1
      for i in range(-k,k+1):
        for j in range(-k,k+1):
          if (Check_Value([x0+i,y0+j],checked_pix)==False) and (0<x0+i<dim[0] and 0<y0+j<dim[1]):
            checked_pix=np.append(checked_pix,np.array([[x0+i,y0+j]]),axis=0)
            if (image[x0+i,y0+j] == 0):
              X=x0+i
              Y=y0+j  
              found=1
    first_point2=[X,Y]
  return first_point2


def Line_vec (Vector,x0,y0,image,dim):
  [X,Y]=first_point (x0,y0,image,dim)
  y=y0
  x=x0
  if (X-x0>0):
    sign_x=+1
  else:
    sign_x=-1
  if (Y-y0>0):
    sign_y=+1
  else:
    sign_y=-1
  delta_x=abs(X-x0)
  delta_y=abs(Y-y0)
  while(True):
    if (delta_y==0 and delta_x==0):
      break
    if (delta_x>delta_y):
      Delta = delta_x - delta_y
      for d in range(1,Delta+1):      
        if (0<x+sign_x<dim[0]):
          delta_x=delta_x-1
          x=x+sign_x
          Vector=np.append(Vector,np.array([[x,y,0]]),axis=0)
    elif (delta_y>delta_x  and 0<y<dim[1] ):
      Delta = delta_y - delta_x
      for d in range(1,Delta+1):     
        if (0<y+sign_y<dim[1]):
          delta_y=delta_y-1
          y=y+sign_y
          Vector=np.append(Vector,np.array([[x,y,0]]),axis=0)
    elif (delta_y==delta_x):
      if (0<y+sign_y<dim[1] and 0<x+sign_x<dim[0] ):
        delta_y=delta_y-1
        delta_x=delta_x-1
        y=y+sign_y
        x=x+sign_x
        Vector=np.append(Vector,np.array([[x,y,0]]),axis=0)
  return [Vector,X,Y]






# based on memory 
def nextpoint (x_c,y_c,image,dim,mem):
  neighbor_pix=np.zeros(8,int)
  K=[[0,-1],[-1,-1],[-1,0],[-1,1],[0,1],[1,1],[1,0],[1,-1]]
  number=0    
  for [i,j] in K:
    if (0<x_c+i<dim[0] and 0<y_c+j<dim[1]):
      if (image[x_c+i,y_c+j] == 0):
        neighbor_pix[number]=1
    number=number+1
  if (np.sum(neighbor_pix)==1):
    print('one choise')
    arg=np.where(neighbor_pix==1)
    x_n=K[arg[0][0]][0]+x_c
    y_n=K[arg[0][0]][1]+y_c
    for index in range(np.size(mem)):
      if (np.size(mem)-index-1==0):
        mem[0]=arg[0][0]
      else:
        mem[np.size(mem)-index-1]=mem[np.size(mem)-index-2]
    return [x_n,y_n,mem]
  elif(np.sum(neighbor_pix)>=2):
    even=0
    odd=0
    for i in range(8):
      if i%2==0:
        if (neighbor_pix[i] == 1):
          even=even+1
      else:
        if (neighbor_pix[i] == 1):
          odd=odd+1
    if (even==1):
      print('one even choise')
      if   (neighbor_pix[0] == 1):
        arg=0
      elif (neighbor_pix[2] == 1):
        arg=2
      elif (neighbor_pix[4] == 1):
        arg=4
      elif (neighbor_pix[6] == 1):
        arg=6
      x_n=K[arg][0]+x_c
      y_n=K[arg][1]+y_c
      for index in range(np.size(mem)):
        if (np.size(mem)-index-1==0):
          mem[0]=arg
        else:
          mem[np.size(mem)-index-1]=mem[np.size(mem)-index-2]
      return [x_n,y_n,mem]
    elif(even>=2):
      mem_copy=np.copy(mem)
      mem_copy = np.delete(mem_copy,np.where(mem_copy==9))
      rep=None
      while(True):
        mem_copy = np.delete(mem_copy,np.where(mem_copy==rep))
        rep=np.argmax([np.count_nonzero(mem_copy==0),np.count_nonzero(mem_copy==1),np.count_nonzero(mem_copy==2),np.count_nonzero(mem_copy==3),np.count_nonzero(mem_copy==4),np.count_nonzero(mem_copy==5),np.count_nonzero(mem_copy==6),np.count_nonzero(mem_copy==7),np.count_nonzero(mem_copy==8)])
        if (np.sum(mem)==9*np.size(mem)):
          for r in range(8):
            if (r%2==0):
              if (neighbor_pix[r] == 1):########
                x_n=K[r][0]+x_c
                y_n=K[r][1]+y_c
                for index in range(np.size(mem)):
                  if (np.size(mem)-index-1==0):
                    mem[0]=r
                  else:
                    mem[np.size(mem)-index-1]=mem[np.size(mem)-index-2]
                return [x_n,y_n,mem]

        elif (neighbor_pix[rep]==1 and rep%2==0):
          x_n=K[rep][0]+x_c
          y_n=K[rep][1]+y_c
          for index in range(np.size(mem)):
            if (np.size(mem)-index-1==0):
              mem[0]=rep
            else:
              mem[np.size(mem)-index-1]=mem[np.size(mem)-index-2]
          return [x_n,y_n,mem]       
        elif (np.size(mem_copy)==0): ######################
          if (neighbor_pix[0] == 1):
            arg=0
          elif (neighbor_pix[2] == 1):
            arg=2
          elif (neighbor_pix[4] == 1):
            arg=4
          elif (neighbor_pix[6] == 1):
            arg=6
          x_n=K[arg][0]+x_c
          y_n=K[arg][1]+y_c
          for index in range(np.size(mem)):
            if (np.size(mem)-index-1==0):
              mem[0]=arg
            else:
              mem[np.size(mem)-index-1]=mem[np.size(mem)-index-2]
          return [x_n,y_n,mem]   
    elif(odd>=2 and even==0):
      mem_copy=np.copy(mem)
      mem_copy = np.delete(mem_copy,np.where(mem_copy==9))
      rep=None
      while(True):
        mem_copy = np.delete(mem_copy,np.where(mem_copy==rep))
        rep=np.argmax([np.count_nonzero(mem_copy==0),np.count_nonzero(mem_copy==1),np.count_nonzero(mem_copy==2),np.count_nonzero(mem_copy==3),np.count_nonzero(mem_copy==4),np.count_nonzero(mem_copy==5),np.count_nonzero(mem_copy==6),np.count_nonzero(mem_copy==7),np.count_nonzero(mem_copy==8)])
        if (np.sum(mem)==9*np.size(mem)):
          for r in range(8):
            if (r%2==1):###############
              if (neighbor_pix[r] == 1):
                x_n=K[r][0]+x_c
                y_n=K[r][1]+y_c
                for index in range(np.size(mem)):
                  if (np.size(mem)-index-1==0):
                    mem[0]=r
                  else:
                    mem[np.size(mem)-index-1]=mem[np.size(mem)-index-2]
                return [x_n,y_n,mem]
        elif (neighbor_pix[rep]==1 and rep%2==1):
          x_n=K[rep][0]+x_c
          y_n=K[rep][1]+y_c
          for index in range(np.size(mem)):
            if (np.size(mem)-index-1==0):
              mem[0]=rep
            else:
              mem[np.size(mem)-index-1]=mem[np.size(mem)-index-2]
          return [x_n,y_n,mem]
        elif (np.size(mem_copy)==0):
          if (neighbor_pix[1] == 1):
            arg=1
          elif (neighbor_pix[3] == 1):
            arg=3
          elif (neighbor_pix[5] == 1):
            arg=5
          elif (neighbor_pix[7] == 1):
            arg=7
          x_n=K[arg][0]+x_c
          y_n=K[arg][1]+y_c
          for index in range(np.size(mem)):
            if (np.size(mem)-index-1==0):
              mem[0]=arg
            else:
              mem[np.size(mem)-index-1]=mem[np.size(mem)-index-2]
          return [x_n,y_n,mem] 
  else :
    mem=[]
    x_n=None
    y_n=None
    return [x_n,y_n,mem]


####################################################################################################################

# based on memory 
def nextpoint (x_c,y_c,image,dim,mem):
  neighbor_pix=np.zeros(8,int)
  K=[[0,-1],[-1,-1],[-1,0],[-1,1],[0,1],[1,1],[1,0],[1,-1]]
  number=0    
  for [i,j] in K:
    if (0<x_c+i<dim[0] and 0<y_c+j<dim[1]):
      if (image[x_c+i,y_c+j] == 0):
        neighbor_pix[number]=1
    number=number+1
  if (np.sum(neighbor_pix)==1):
    arg=np.where(neighbor_pix==1)
    x_n=K[arg[0][0]][0]+x_c
    y_n=K[arg[0][0]][1]+y_c
    for index in range(np.size(mem)):
      if (np.size(mem)-index-1==0):
        mem[0]=arg[0][0]
      else:
        mem[np.size(mem)-index-1]=mem[np.size(mem)-index-2]
    return [x_n,y_n,mem]



  elif(np.sum(neighbor_pix)>=2):
    mem_copy=np.copy(mem)
    mem_copy = np.delete(mem_copy,np.where(mem_copy==9))
    rep=None
    while(True):
      mem_copy = np.delete(mem_copy,np.where(mem_copy==rep))
      rep=np.argmax([np.count_nonzero(mem_copy==0),np.count_nonzero(mem_copy==1),np.count_nonzero(mem_copy==2),np.count_nonzero(mem_copy==3),np.count_nonzero(mem_copy==4),np.count_nonzero(mem_copy==5),np.count_nonzero(mem_copy==6),np.count_nonzero(mem_copy==7),np.count_nonzero(mem_copy==8)])
      if (np.size(mem_copy)==0):   
          for r in range(8):
            if (r%2==0):
              if (neighbor_pix[r] == 1):
                x_n=K[r][0]+x_c
                y_n=K[r][1]+y_c
                for index in range(np.size(mem)):
                  if (np.size(mem)-index-1==0):
                    mem[0]=r
                  else:
                    mem[np.size(mem)-index-1]=mem[np.size(mem)-index-2]
                return [x_n,y_n,mem]
          for r in range(8):
            if (r%2==1):    
              if (neighbor_pix[r] == 1):
                x_n=K[r][0]+x_c
                y_n=K[r][1]+y_c
                for index in range(np.size(mem)):
                  if (np.size(mem)-index-1==0):
                    mem[0]=r
                  else:
                    mem[np.size(mem)-index-1]=mem[np.size(mem)-index-2]
                return [x_n,y_n,mem]
      
      elif (neighbor_pix[rep]==1):
          x_n=K[rep][0]+x_c
          y_n=K[rep][1]+y_c
          for index in range(np.size(mem)):
            if (np.size(mem)-index-1==0):
              mem[0]=rep
            else:
              mem[np.size(mem)-index-1]=mem[np.size(mem)-index-2]
          return [x_n,y_n,mem]            
    
  else :
    mem=[]
    x_n=None
    y_n=None
    return [x_n,y_n,mem]

img = cv2.imread('/content/drive/My Drive/ESLAB4x.jpg',1)
original = img.copy()
#dim = (45, 66)
#x=166 y=106
dim=(424,664) #dim=(y,x)
img = cv2.resize(img, (dim[1],dim[0]) , interpolation = cv2.INTER_AREA)
cv2_imshow(img)
img = img[::-1,:,:]

b,g,r = cv2.split(img)
for i in range(dim[0]):
  for j in range(dim[1]):
    if b[i,j]>110:  
      b[i,j]=255
    else:
      b[i,j]=0
image=b.copy()
cv2_imshow(image)
#x=y y=x
# use the starting pixel OR the real position on the board * 4
# x0 = dim(y) - y_start
# y0 = x_start
x0=424-262
y0=150

#x0=257
#y0=380
Track_img=np.zeros(dim)
for i in range(dim[0]):
  for j in range(dim[1]):
    Track_img[i,j]=int(255)
#Track_img=image
#Track_img[y0,x0]=100
#cv2_imshow(Track_img) 

Vector=np.array([[x0,y0,0]])
First_point=first_point (x0,y0,image,dim)
[Vector,X,Y]=Line_vec(Vector,x0,y0,image,dim)
image[X,Y]=255
size=np.size(image)*255
mem=np.array([9,9,9,9,9,9,9,9,9])



while True:
  [x_n,y_n,mem]=nextpoint (X,Y,image,dim,mem)
  #####-------------------------------------
  # neighbor_pix=np.zeros(8,int)
  # K=[[0,-1],[-1,-1],[-1,0],[-1,1],[0,1],[1,1],[1,0],[1,-1]]
  # number=0    
  # for [i,j] in K:
  #  if (0<x_n+i<dim[0] and 0<y_n+j<dim[1]):
  #    if (image[x_n+i,y_n+j] == 0):
  #      neighbor_pix[number]=1
  #  number=number+1
  # for [i,j] in K:
  #  if ([x_n+i,y_n+j] == First_point and np.sum(neighbor_pix)==1):
  #    break
  ####-----------------------------------------
  if x_n!=None and y_n!=None :
    X=x_n
    Y=y_n
    image[X,Y]=255
    Vector=np.append(Vector,np.array([[X,Y,1]]),axis=0)
    #Track_img[X,Y]=100
    #cv2_imshow(Track_img)
  else:
    mem=np.array([9,9,9,9,9,9,9,9,9])
    [Vector,x_n,y_n]=Line_vec(Vector,X,Y,image,dim)
    X=x_n
    Y=y_n
    image[X,Y]=255
    Vector=np.append(Vector,np.array([[X,Y,1]]),axis=0)
  
  if (size==np.sum(image)):
    break

Track_img=np.zeros(dim)
#ret=0
for i in range(dim[0]):
  for j in range(dim[1]):
    Track_img[i,j]=int(255)
#Track_img[0,10]=50
#Track_img[0,20]=50
cv2_imshow(Track_img)
for i in range(len(Vector)):
  if (Vector[i][2]==1):
    Track_img[Vector[i][0],Vector[i][1]]=0
    #ret=ret+1
    #cv2.imwrite("/content/drive/My Drive/Frames/frame%d.jpg" %ret, Track_img)
    #print(Vector[i][0],Vector[i][1])
  else:
    Track_img[Vector[i][0],Vector[i][1]]=150
    #ret=ret+1
    #cv2.imwrite("/content/drive/My Drive/Frames/frame%d.jpg" %ret, Track_img)
  cv2_imshow(Track_img)

print(np.shape(Vector)[0])
text=''
#text='{'
for i in range(np.shape(Vector)[0]):
  #y=y
  y=Vector[i][0]/4
  x=Vector[i][1]/4
  z=Vector[i][2]
  #print(str(x))

  #2
  #text=text+str(x)+','+str(y)+','
  #text=text+'{'+str(x)+','+str(y)+'},'


  text=text+str(x)+','+str(y)+','+str(z)+','
  #text=text+'{'+str(x)+','+str(y)+','+str(z)+'},'

#text=text+'}'
text
